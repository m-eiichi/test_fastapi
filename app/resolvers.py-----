from sqlalchemy.orm import Session
import strawberry
from schemas import CustomerSchema  # Pydanticモデル
from db import SessionLocal  # SessionLocalをインポートしてセッションを取得
from models import Customer as CustomerModel  # SQLAlchemy ORMモデル

# Pydantic モデルを GraphQL 型に変換
@strawberry.experimental.pydantic.type(model=CustomerSchema, all_fields=True)
class Customer:
    pass

@strawberry.type
class Query:
    @strawberry.field
    def get_customer(self, customer_id: int) -> Customer:
        db: Session = SessionLocal()  # セッション開始
        # CustomerModel（SQLAlchemy ORMモデル）を使用してクエリを実行
        customer = db.query(CustomerModel).filter(CustomerModel.customer_id == customer_id).first()
        db.close()  # セッションを閉じる
        
        if customer:
            return Customer.model_validate(customer)  # Pydanticのモデルに変換して返す
        else:
            raise ValueError("Customer not found")  # 顧客が見つからなかった場合



# @strawberry.type
# class Mutation:
#     @strawberry.mutation
#     def create_customer(self, name: str, age: int) -> CustomerSchema:
#         db: Session = next(get_db())
#         new_customer = Customer(name=name, age=age)
#         db.add(new_customer)
#         db.commit()
#         db.refresh(new_customer)
#         return CustomerSchema.from_orm(new_customer)